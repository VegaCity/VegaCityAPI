// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VegaCityApp.Domain.Models;

#nullable disable

namespace VegaCityApp.Domain.Migrations
{
    [DbContext(typeof(VegaCityAppContext))]
    partial class VegaCityAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VegaCityApp.Domain.Models.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("EtagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsIncrease")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EtagId");

                    b.HasIndex("OrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("Deposit", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.DisputeReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IssueType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Resolution")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("DisputeReports");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Etag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Cccd")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("CCCD")
                        .IsFixedLength();

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EtagCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("EtagTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ETagTypeId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("MarketZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Qrcode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("QRCode");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EtagTypeId");

                    b.HasIndex("MarketZoneId");

                    b.HasIndex("WalletId");

                    b.ToTable("ETag", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.EtagType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal?>("BonusRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("MarketZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MarketZoneId");

                    b.ToTable("ETagType", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.House", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("HouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.MarketZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("MarketZone", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MenuJson")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CustomerInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EtagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ETagId");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SaleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EtagId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CrDate")
                        .HasColumnType("datetime")
                        .HasColumnName("crDate");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpsDate")
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate");

                    b.Property<double?>("Vatrate")
                        .HasColumnType("float")
                        .HasColumnName("VATRate");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.PackageETagTypeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("EtagTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ETagTypeId");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("EtagTypeId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageE-TagTypeMapping", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("HouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StoreType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.HasIndex("MarketZoneId");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsIncrease")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Cccd")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasColumnName("CCCD")
                        .IsFixedLength();

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsChange")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarketZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CrDate")
                        .HasColumnType("datetime")
                        .HasColumnName("crDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("UpsDate")
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshToken", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("BalanceHistory")
                        .HasColumnType("int");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WalletType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CrDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("crDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Deflag")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MarketZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upsDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("MarketZoneId");

                    b.ToTable("Zone", (string)null);
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Deposit", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Etag", "Etag")
                        .WithMany("Deposits")
                        .HasForeignKey("EtagId")
                        .HasConstraintName("FK_Deposit_ETag");

                    b.HasOne("VegaCityApp.Domain.Models.Order", "Order")
                        .WithMany("Deposits")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Deposit_Order");

                    b.HasOne("VegaCityApp.Domain.Models.Wallet", "Wallet")
                        .WithMany("Deposits")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Deposit_Wallet");

                    b.Navigation("Etag");

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.DisputeReport", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Store", "Store")
                        .WithMany("DisputeReports")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_DisputeReports_Store");

                    b.HasOne("VegaCityApp.Domain.Models.User", "User")
                        .WithMany("DisputeReports")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_DisputeReports_User");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Etag", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.EtagType", "EtagType")
                        .WithMany("Etags")
                        .HasForeignKey("EtagTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ETag_ETagType");

                    b.HasOne("VegaCityApp.Domain.Models.MarketZone", "MarketZone")
                        .WithMany("Etags")
                        .HasForeignKey("MarketZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_ETag_MarketZone");

                    b.HasOne("VegaCityApp.Domain.Models.Wallet", "Wallet")
                        .WithMany("Etags")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_ETag_Wallet");

                    b.Navigation("EtagType");

                    b.Navigation("MarketZone");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.EtagType", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.MarketZone", "MarketZone")
                        .WithMany("EtagTypes")
                        .HasForeignKey("MarketZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_ETagType_MarketZone");

                    b.Navigation("MarketZone");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.House", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Zone", "Zone")
                        .WithMany("Houses")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_House_Zone");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Menu", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Store", "Store")
                        .WithMany("Menus")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Menu_Store");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Order", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Etag", "Etag")
                        .WithMany("Orders")
                        .HasForeignKey("EtagId")
                        .HasConstraintName("FK_Order_ETag");

                    b.HasOne("VegaCityApp.Domain.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Order_Store");

                    b.HasOne("VegaCityApp.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Etag");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Menu", "Menu")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_OrderDetail_Menu");

                    b.HasOne("VegaCityApp.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.PackageETagTypeMapping", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.EtagType", "EtagType")
                        .WithMany("PackageETagTypeMappings")
                        .HasForeignKey("EtagTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PackageE-TagTypeMapping_ETagType");

                    b.HasOne("VegaCityApp.Domain.Models.Package", "Package")
                        .WithMany("PackageETagTypeMappings")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_PackageE-TagTypeMapping_package");

                    b.Navigation("EtagType");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.ProductCategory", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Menu", "Menu")
                        .WithMany("ProductCategories")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Menu");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Store", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.House", "House")
                        .WithMany("Stores")
                        .HasForeignKey("HouseId")
                        .HasConstraintName("FK_Store_House");

                    b.HasOne("VegaCityApp.Domain.Models.MarketZone", "MarketZone")
                        .WithMany("Stores")
                        .HasForeignKey("MarketZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_Store_MarketZone");

                    b.Navigation("House");

                    b.Navigation("MarketZone");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Transaction", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Store", "Store")
                        .WithMany("Transactions")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Transaction_Store");

                    b.HasOne("VegaCityApp.Domain.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("FK_Transaction_Wallet");

                    b.Navigation("Store");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.User", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.HasOne("VegaCityApp.Domain.Models.Store", "Store")
                        .WithMany("Users")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_User_Store1");

                    b.Navigation("Role");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.UserRefreshToken", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Wallet", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.Store", "Store")
                        .WithMany("Wallets")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Wallet_Store");

                    b.HasOne("VegaCityApp.Domain.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Wallet_User");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Zone", b =>
                {
                    b.HasOne("VegaCityApp.Domain.Models.MarketZone", "MarketZone")
                        .WithMany("Zones")
                        .HasForeignKey("MarketZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_Zone_MarketZone");

                    b.Navigation("MarketZone");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Etag", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.EtagType", b =>
                {
                    b.Navigation("Etags");

                    b.Navigation("PackageETagTypeMappings");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.House", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.MarketZone", b =>
                {
                    b.Navigation("EtagTypes");

                    b.Navigation("Etags");

                    b.Navigation("Stores");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Menu", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Order", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Package", b =>
                {
                    b.Navigation("PackageETagTypeMappings");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Store", b =>
                {
                    b.Navigation("DisputeReports");

                    b.Navigation("Menus");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");

                    b.Navigation("Users");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.User", b =>
                {
                    b.Navigation("DisputeReports");

                    b.Navigation("Orders");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Wallet", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Etags");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("VegaCityApp.Domain.Models.Zone", b =>
                {
                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
